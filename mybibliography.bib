@article{HUTTER201479,
title = {Algorithm runtime prediction: Methods and evaluation},
journal = {Artificial Intelligence},
volume = {206},
pages = {79-111},
year = {2014},
issn = {0004-3702},
doi = {https://doi.org/10.1016/j.artint.2013.10.003},
url = {https://www.sciencedirect.com/science/article/pii/S0004370213001082},
author = {Frank Hutter and Lin Xu and Holger H. Hoos and Kevin Leyton-Brown},
keywords = {Supervised machine learning, Performance prediction, Empirical performance models, Response surface models, Highly parameterized algorithms, Propositional satisfiability, Mixed integer programming, Travelling salesperson problem},
abstract = {Perhaps surprisingly, it is possible to predict how long an algorithm will take to run on a previously unseen input, using machine learning techniques to build a model of the algorithmʼs runtime as a function of problem-specific instance features. Such models have important applications to algorithm analysis, portfolio-based algorithm selection, and the automatic configuration of parameterized algorithms. Over the past decade, a wide variety of techniques have been studied for building such models. Here, we describe extensions and improvements of existing models, new families of models, and—perhaps most importantly—a much more thorough treatment of algorithm parameters as model inputs. We also comprehensively describe new and existing features for predicting algorithm runtime for propositional satisfiability (SAT), travelling salesperson (TSP) and mixed integer programming (MIP) problems. We evaluate these innovations through the largest empirical analysis of its kind, comparing to a wide range of runtime modelling techniques from the literature. Our experiments consider 11 algorithms and 35 instance distributions; they also span a very wide range of SAT, MIP, and TSP instances, with the least structured having been generated uniformly at random and the most structured having emerged from real industrial applications. Overall, we demonstrate that our new models yield substantially better runtime predictions than previous approaches in terms of their generalization to new problem instances, to new algorithms from a parameterized space, and to both simultaneously.}
}
@book{SKIENA2008,
  author = {Steven S. Skiena},
  year = {2008},
  title = {The Algorithm Design Manual},
  publisher = {Springer},
  edition = {1}
}
@book{ZAHARIE2008,
 author = {Daniela Zaharie},
  year = {2008},
  title = {Introducere în proiectarea și analiza algoritmilor},
  publisher = {eubeea},
  edition = {1}
}
@article{LAMFO2019,
  title={Sorting Algorithms},
  author={Leonardo Galler and Matteo Kimura},
  journal={LAMFO},
  year={2019},
  publisher={LAMFO}
}
@article{BOGO2013,
title={Bogo-sort is Sort of Slow},
author={Max Sherman},
year={2013},
journal={Washington Edu}
}
@article{COMP2015,
title={A Comparative Study between Various Sorting Algorithms},
author={Jehad Hammad},
year={2015},
journal={IJCSNS International Journal of Computer Science and Network Security},
volume={15}
}